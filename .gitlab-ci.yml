stages:
  - build
  - test
  - analyse
  - deploy

# DinD service pour Testcontainers
services:
  - name: docker:dind
    command: ["--tls=false"]

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

# Compilation
build-app:
  stage: build
  image: maven:3-eclipse-temurin-21
  script:
    - mvn clean compile
  cache:
    key:
      files:
        - pom.xml
    paths:
      - .m2/repository
  artifacts:
    paths:
      - target/

# Tests avec Testcontainers
test-maven:
  stage: test
  image: maven:3-eclipse-temurin-21
  services:
    - name: docker:dind
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    REDIS_URL: redis://localhost:6379
    JWT_EXPIRATION: 3600000
    EMAIL_VERIFICATION_REQUIRED: false
    APP_AUTH_FRONTEND_URL: http://localhost:8100
  script:
    - mvn clean test -Dspring.profiles.active=test
  interruptible: true
  cache:
    key:
      files:
        - pom.xml
    paths:
      - .m2/repository
  artifacts:
    paths:
      - target/
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml

# Analyse Sonar après compilation et tests
sonarcloud-check:
  stage: analyse
  image: maven:3-eclipse-temurin-21
  variables:
    SONAR_TOKEN: $SONAR_TOKEN  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
      - .m2/repository
  script:
    mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
      -Dsonar.projectKey=nahima-toumi697_Elec_business_spring \
      -Dsonar.organization=nahima-toumi697 \
      -Dsonar.host.url=https://sonarcloud.io \
      -Dsonar.token=$SONAR_TOKEN \
  only:
    - merge_requests
    - main
    - develop

# Déploiement de l'API sur Render
deploy-api:
  stage: deploy
  image: docker:20.10.16
  services:
    - name: docker:dind
      command: ["--tls=false"]
  script:
    # Construction de l'image Docker
    - echo "Building Docker image"
    - docker build -t ${CI_REGISTRY_IMAGE}/api:${CI_COMMIT_SHORT_SHA} --target prod .

    # Pousser l'image vers le registre Docker
    - echo "Pushing Docker image to GitLab Container Registry"
    - docker push ${CI_REGISTRY_IMAGE}/api:${CI_COMMIT_SHORT_SHA}

    # Déployer l'image sur Render via l'API
    - echo "Deploying to Render"
    - |
      curl --request POST \
       --url https://api.render.com/v1/services/${RENDER_API_SERVICE_ID}/deploys \
       --header 'accept: application/json' \
       --header "authorization: Bearer ${RENDER_API_KEY}" \
       --header 'content-type: application/json' \
       --data "
        {
          \"clearCache\": \"do_not_clear\",
          \"imageUrl\": \"${CI_REGISTRY_IMAGE}/api:${CI_COMMIT_SHORT_SHA}\"
        }
        "
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"' # S'assurer que ce job s'exécute uniquement sur la branche main

