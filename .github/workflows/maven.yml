name: CI/CD Spring Boot avec Render

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    name: üß™ Maven Tests
    runs-on: ubuntu-latest
    env:
      SPRING_PROFILES_ACTIVE: test
  
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v3

      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Maven Tests
        run: mvn test

      - name: Upload JUnit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-xml-reports
          path: |
            **/target/surefire-reports/*.xml
            **/target/failsafe-reports/TEST-*.xml

      - name: Upload HTML Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-test-reports
          path: |
            **/target/site

  sonar:
    name: üîç SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v3

      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Nahima697_Elec_business_spring

  build:
    name: üöÄ Build & Deploy
    runs-on: ubuntu-latest
    needs: test
    env:
      SPRING_PROFILES_ACTIVE: prod
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: elec_business_user
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRATION: 3600000
      MAIL_HOST: smtp.gmail.com
      MAIL_PORT: 587
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      EMAIL_VERIFICATION_REQUIRED: true
      URL_FRONT: ${{ secrets.URL_FRONT }}

    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v3

      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: üîí V√©rification des secrets
        run: |
          if [ -z "${{ secrets.RENDER_SERVICE_ID }}" ]; then
            echo "ERROR: RENDER_SERVICE_ID n'est pas d√©fini !"
            exit 1
          fi
          if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then
            echo "ERROR: RENDER_API_KEY n'est pas d√©fini !"
            exit 1
          fi

      - name: Build Docker image
        run: docker build -t myapp --targe
