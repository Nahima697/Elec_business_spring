name: CI/CD Spring Boot avec Render

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      SPRING_PROFILES_ACTIVE: prod,test

      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: elec_business_user
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRATION: 3600000

      MAIL_HOST: smtp.gmail.com
      MAIL_PORT: 587
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}

      EMAIL_VERIFICATION_REQUIRED: true

      URL_FRONT: ${{ secrets.URL_FRONT }}

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: üì• Checkout du code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Java 21
      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      # 3Ô∏è‚É£ V√©rification des secrets Render
      - name: üîí V√©rification des secrets
        run: |
          if [ -z "${{ secrets.RENDER_SERVICE_ID }}" ]; then
            echo "ERROR: RENDER_SERVICE_ID n'est pas d√©fini !"
            exit 1
          fi
          if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then
            echo "ERROR: RENDER_API_KEY n'est pas d√©fini !"
            exit 1
          fi

      # 4Ô∏è‚É£ Cache Maven
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 5Ô∏è‚É£ Run Maven Tests
      - name: Run Maven Integration Tests
        run: mvn clean verify site

      # 6Ô∏è‚É£ Upload JUnit Test Results
      - name: Upload JUnit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-xml-reports
          path: |
            **/target/surefire-reports/*.xml
            **/target/failsafe-reports/TEST-*.xml

      # 7Ô∏è‚É£ Upload HTML Test Reports
      - name: Upload HTML Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-test-reports
          path: |
            **/target/site
            
      # Sonarcube Analyse
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Nahima697_Elec_business_spring

      # 8Ô∏è‚É£ Build Docker image
      - name: Build Docker image
        run: docker build -t myapp --target runtime .

      # 9Ô∏è‚É£ Installer CA certificates pour curl
      - name: Installer CA certificates
        run: sudo apt-get update && sudo apt-get install -y ca-certificates

  # üîü D√©ploiement Render
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true
